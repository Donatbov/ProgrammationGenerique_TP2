#include <iostream>
#include <fstream>
#include "Color.hpp"
#include "Image2D.hpp"
#include "Image2DWriter.hpp"

using namespace std;

int main( int argc, char** argv )
{
    typedef Image2D<Color> ColorImage2D;
    typedef ColorImage2D::Iterator Iterator;
    typedef ColorImage2D::ConstIterator ConstIterator;
    //ColorImage2D img( 8, 8, Color(0, 255, 0) ); // imagette 8x8 remplie de couleur verte
    ColorImage2D img( 256, 256, Color(0, 0, 0) ); // imagette 256x256 remplie de couleur verte
    Iterator it = img.begin();
    for ( int y = 0; y < img.h(); ++y )
    {
        for ( int x = 0; x < img.w(); ++x )
            /* //pour afficher le contenu
            cout << "  (" << (int) img.at( x, y ).r() << "," << (int) img.at( x, y ).g() << "," << (int) img.at( x, y ).b() << ")"; // la conversion permet de voir les couleurs sous la forme (r,g,b) avec r, g et b entre 0 et 1
        cout << std::endl;
             */
            *it++ = Color( y, x, (2*x+2*y) % 256 );
    }
    /*
    std::ofstream output( "colors.ppm"); // ios::binary for Windows system
    output << "P6" << std::endl; // PPM raw
    output << "# Generated by You !" << std::endl;
    output << img.w() << " " << img.h() << std::endl;
    output << "255" << std::endl;
     */

    /*
    for ( Iterator it = img.begin(), itE = img.end(); it != itE; ++it ) // (*)
    {
        Color c = *it;
        output << c.red << c.green << c.blue;
    }
     */
    /*
    const ColorImage2D& cimg = img; // Vue "constante" sur l'image img.
    for ( ConstIterator cit = cimg.begin(), itE = cimg.end(); cit != itE; ++cit ) // (*)
    {
        Color c = *cit;
        output << c.red << c.green << c.blue;
    }
    output.close();
     */
    ofstream output( "colors.ppm" );
    bool ok2 = Image2DWriter<Color>::write( img, output, false );
    if ( !ok2 ) {
        std::cerr << "Error writing output file." << std::endl;
        return 1;
    }
    output.close();
    return 0;
}