#ifndef _IMAGE2DWRITER_HPP_
#define _IMAGE2DWRITER_HPP_

#include <iostream>
#include <string>
#include "Color.hpp"
#include "Image2DReader.hpp"
#include "Image2DWriter.hpp"

template <typename TValue>
class Image2DWriter {
public:
    typedef TValue Value;
    typedef Image2D<Value> Image;
    static bool write( Image & img, std::ostream & output, bool ascii )
    {
        std::cerr << "[Image2DWriter<TValue>::write] NOT IMPLEMENTED." << std::endl;
        return false;
    }
};

/// Specialization for gray-level images.
template <>
class Image2DWriter<unsigned char> {
public:
    typedef unsigned char Value;
    typedef Image2D<Value> Image;
    static bool write( Image & img, std::ostream & output, bool ascii )
    {
        // Reprenez votre code du TP1.
        std::string format;
        if (ascii)
            format = "P2";
        else
            format = "P5";

        // entete du fichier
        output << format << std::endl
               << "# un commentaire" << std::endl
               << img.w() << " " << img.h() << std::endl
               << "255" << std::endl;

        // les data
        if (ascii) {
            for (Image2D<Value>::ConstIterator i = img.cbegin(); i != img.cend(); ++i) {
                if ((i-img.begin()+1) % img.w() == 0)   //si on est en bout de ligne
                    output << (unsigned int)*i << std::endl;
                else
                    output << (unsigned int)*i << "  ";
            }
        }else{
            for (Image2D<Value>::ConstIterator i = img.cbegin(); i != img.cend(); ++i) {
                output << *i;
            }
        }
        return true;
    }
};

/// Specialization for color images.
template <>
class Image2DWriter<Color> {
public:
    typedef Color Value;
    typedef Image2D<Value> Image;
    static bool write( Image & img, std::ostream & output, bool ascii )
    {
        // Reprenez la partie sauvegarde de l'exemple précédent testColorImage2D.cpp
        const Image2D<Value>& cimg = img; // Vue "constante" sur l'image img.

        // entete du fichier
        output << "P6" << std::endl; // PPM raw
        output << "# Generated by You !" << std::endl;
        output << img.w() << " " << img.h() << std::endl;
        output << "255" << std::endl;

        // les data
        for (Image2D<Value>::ConstIterator i = img.cbegin(); i != img.cend(); ++i) {
            Color c = *i;
            output << c.red << c.green << c.blue;
        }
        return true;
    }
};


#endif // _IMAGE2DWRITER_HPP_